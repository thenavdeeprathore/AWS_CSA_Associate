# Route53 Important Points
# ====================

# Route53 -- DNS service
# The very first inter state road from one side of the country to the other is named as Route66
# DNS port number is 53
# so the name Route53 in AWS

=> DNS is used to convert human friendly domain names (https://www.google.com) into and IP address (https://82.124.53.1)
=> IP address comes in two forms: IPv4 and IPv6
    - IPv4 has address space of 32 bits (4 billion addresses)
    - IPv6 has address space of 128 bits (340 undecillion addresses)
=> Route53 costs

=> Top level domain names:
    - .com
    - .edu
    - .gov

=> Top level domain name with second level domain names:
    - .co.uk {.uk - top level, .co is second level}
    - .co.za

=> NS stands for Name Server records
    .com --> NS records --> SOA (Start of authority)

=> A record --> Address record
=> TTL --> Time To Live
=> CName --> Canonical Name (used to resolve one domain name to another)
=> You can't have a CName for http://google.com, it must be either A record or an Alias

# Common DNS types
    - SOA records
    - NS records
    - A records
    - CNames
    - MX records
    - PTR records


# Routing policies available with Route53
1) Simple routing
2) Weighted routing
3) Latency-based routing
4) Failover routing
5) Geolocation routing
6) Geoproximity routing (Traffic flow only)
7) Multivalue answer routing


# 1) Simple routing policy
=> One DNS record with multiple IP addresses
=> If you specify multiple values in a record, Route53 returns all values to the user in a random order
=> only this routing policy doesn't have Health Checks, rest all have the option for Health checks

# Health Checks
=> You can set health checks on individual record sets
=> If a record set fails a health check it will be removed from Route53 until it passes the health check
=> You can set SNS notifications to alert you if a health check is failed

# 2) Weighted routing policy
=> Allows you split your traffic based on different weights assigned
=> Example: you can set 10% of your traffic go to US-EAST-1 and 90% of your traffic go to EU-EAST-1

# 3) Latency-based routing policy
=> Allows you to route your traffic based on the lowest network latency for your end user. (which region will give them the fastest response time)
=> Route53 --> latency 54ms --> EU-WEST-2
=> Route53 --> latency 300ms --> US-EAST-1

# 4) Failover routing policy
=> This policy is used when you want to create an Active/Passive set up.
=> Route53 will monitor the health of your primary site (Active site) using a health check
=> Failover record type: Primary and Secondary
=> If Active site fails healthcheck (unhealthy) then Route53 will send traffic to the secondary site (Passive site)

# 5) Geolocation routing policy
=> Let's you choose where your traffic will be sent based on the geographic location of your users
=> European customers routed to EU region servers
=> US customers routed to US region servers

# 7) Multivalue answer routing policy
=> This is similar to simple routing policy however it allows you to put health checks on each record set



# Important Points:
=> ELBs do not have pre-defined IPv4 address; you resolve them using a DNS name
=> Given the choice, always choose an Alias record over a CName
=> route data to a second resource if the first is unhealthy --> Failover routing
=> route data to resources that have better performance --> Latency-based routing
=> You have created a new subdomain for your popular website, and you need this subdomain to point to an Elastic Load Balancer using Route53. 
    Which DNS record set should you create --> CNAME
=> With Route 53, there is a default limit of 50 domain names. However, this limit can be increased by contacting AWS support.
=> You are hosting a website and would like visitors from United Kingdom to see a different site than those in Australia. 
    Which Routing Policy would help you to accomplish this? --> Geolocation routing
=> Your company hosts 10 web servers all serving the same web content in AWS. They want Route 53 to serve traffic to random web servers. 
    Which routing policy will meet this requirement, and provide the best resiliency? --> Multivalue routing
